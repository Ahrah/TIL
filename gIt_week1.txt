---GIT?-----------------------------------------------
---
1. 버전관리를 한다는 건 어떤 의미일까?
	- 수정한 파일의 수정내용과 수정된 사항을 표시하여 남겨두는 것.(프로젝트 상태가 변경되는 정보를 알고 있다는 것)
	- Git을 이용해서 할 수 있음.

2. 작업내역 단위인 commit 에는 어떤 정보가 포함되어 있어야 잘 버전관리를 할 수 있을까? 
	- 수정사항이 어떤 내용인지 적어두어야 한다. 그래야 나중에 에러를 바로잡기 쉬워짐.

3. 지금까지 우리가 실습은 어떤 순서로 했었지?
	- 폴더 만들기->TXT파일만들기->깃에다가 폴더 올리기(git 초기화)->TXT수정하기->깃에서 수정사항 커밋하기(커밋 파일 누른 후(add (혹은 staging, 스테이징)), 메시지 작성, 커밋하기 클릭)

4. 커밋 내역에는 뭐가 있지?
	- 작업 일자 (날짜와 시간)
	- 작업한 사람(작성자 author)
	- 작업 내역 (commit 메시지)
	- 작업 내역의 순서 : 해당 commit 의 직전 commit 이 무엇인지 정보


---REPO----------------------------------------------
---
- **repo :** 'Git으로 관리되는 프로젝트' 를 Git 에서는 **repo(리포**, repository 리포지토리의 약자) 라고 부릅니다. 내 컴퓨터에 저장되어있는 리포지토리를 **로컬 repo**(local repository) 라고 합니다. Github 처럼 다른 곳에서 접속할 수 있는 공간에 저장되어있는 것을 **원격 repo**(remote repository) 라고 합니다.
- Tracking(추적) : 로컬 repo 와 원격 repo 를 연결한다!
- push : 로컬 repo 의 commit 들을 원격 repo 에 반영하기(push)! 밀어넣기. 원격 repo 에 없는 즉,새로운 commit 내역을 모두 원격 repo 에 한 번에 반영합니다.
- pull : 원격 repo 의 commit 들을 로컬 repo 로 반영하기(pull)! 땡겨오기. 로컬 repo 에 없는 즉,새로운 commit 내역을 모두 로컬 repo 에 한 번에 반영합니다.
    - clone : 원격 repo 를 내 컴퓨터에 가져와서 초기 repo 세팅하는 것을 clone(복제하기)!
    


1. 원격 repo 와 로컬 repo 를 연결해서 내용을 반영하고 싶을 땐 어떤 방법을 써야할까? 
	- 로컬  repo 가 없고 원격 repo 에 있는 내용을 가져오고 싶을 때는 clone 한다.
	- 원격 repo 와 로컬 repo 둘 다 있고 두 개를 연결하고 싶을 때는 로컬 repo 가 원격 repo를 tracking 하도록 설정한다.

2. 원격 repo 와 로컬 repo 는 왜 따로 있을까? 
	- 협업할 때 수정사항을 맞추기 위해서!
3. push 와 pull 의 개념을 원격 repo와 로컬 repo 를 포함해 그림으로 그려보세요.
	- 그림은 힘들고 말로하자면 push는 로컬 투 원격
		pull은 원격 투 로컬
	- 아래 그림은 스파르타 제공

